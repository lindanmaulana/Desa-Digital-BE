import { Prisma } from "@prisma/client";
import { UserWithRelations } from "../models/user.model";
export declare class UserRepository {
    static findCount(args: Prisma.UserCountArgs): Promise<number>;
    static findAll(args: Prisma.UserFindManyArgs): Promise<UserWithRelations[]>;
    static findById(id: string): Promise<({
        staff: {
            id: string;
            created_at: Date;
            updated_at: Date;
            user_id: string;
            identity_number: string | null;
            gender: import("@prisma/client").$Enums.Gender;
            date_of_birth: Date | null;
            phone_number: string | null;
            occupation: string | null;
            marital_status: import("@prisma/client").$Enums.Marital;
        } | null;
        head_of_family: {
            id: string;
            created_at: Date;
            updated_at: Date;
            user_id: string;
            identity_number: string | null;
            gender: import("@prisma/client").$Enums.Gender;
            date_of_birth: Date | null;
            phone_number: string | null;
            occupation: string | null;
            marital_status: import("@prisma/client").$Enums.Marital;
        } | null;
        image: {
            id: string;
            created_at: Date;
            updated_at: Date;
            user_id: string | null;
            filename: string;
            path: string;
            profile_id: string | null;
            social_assistance_id: string | null;
            event_id: string | null;
            development_id: string | null;
            entity_type: import("@prisma/client").$Enums.Entity;
        } | null;
    } & {
        name: string;
        id: string;
        email: string;
        password: string;
        role: import("@prisma/client").$Enums.UserRole;
        otp_code: string | null;
        otp_last_sen_at: Date | null;
        verify_token: string | null;
        is_active: boolean;
        is_first_login: boolean;
        created_at: Date;
        updated_at: Date;
    }) | null>;
    static findByEmail(email: string): Promise<{
        name: string;
        id: string;
        email: string;
        password: string;
        role: import("@prisma/client").$Enums.UserRole;
        otp_code: string | null;
        otp_last_sen_at: Date | null;
        verify_token: string | null;
        is_active: boolean;
        is_first_login: boolean;
        created_at: Date;
        updated_at: Date;
    } | null>;
    static findUserForActivation(id: string): Promise<{
        id: string;
        otp_code: string | null;
        is_active: boolean;
    } | null>;
    static create(args: Prisma.UserCreateArgs): Promise<{
        name: string;
        id: string;
        email: string;
        password: string;
        role: import("@prisma/client").$Enums.UserRole;
        otp_code: string | null;
        otp_last_sen_at: Date | null;
        verify_token: string | null;
        is_active: boolean;
        is_first_login: boolean;
        created_at: Date;
        updated_at: Date;
    }>;
    static updatePassword(id: string, password: string): Promise<{
        name: string;
        id: string;
        email: string;
        password: string;
        role: import("@prisma/client").$Enums.UserRole;
        otp_code: string | null;
        otp_last_sen_at: Date | null;
        verify_token: string | null;
        is_active: boolean;
        is_first_login: boolean;
        created_at: Date;
        updated_at: Date;
    }>;
    static updateProfile(args: Prisma.UserUpdateArgs): Promise<{
        name: string;
        id: string;
        email: string;
        password: string;
        role: import("@prisma/client").$Enums.UserRole;
        otp_code: string | null;
        otp_last_sen_at: Date | null;
        verify_token: string | null;
        is_active: boolean;
        is_first_login: boolean;
        created_at: Date;
        updated_at: Date;
    }>;
    static updateIsFirstLogin(id: string): Promise<{
        name: string;
        id: string;
        email: string;
        password: string;
        role: import("@prisma/client").$Enums.UserRole;
        otp_code: string | null;
        otp_last_sen_at: Date | null;
        verify_token: string | null;
        is_active: boolean;
        is_first_login: boolean;
        created_at: Date;
        updated_at: Date;
    }>;
    static updateIsActive(id: string): Promise<{
        name: string;
        id: string;
        email: string;
        password: string;
        role: import("@prisma/client").$Enums.UserRole;
        otp_code: string | null;
        otp_last_sen_at: Date | null;
        verify_token: string | null;
        is_active: boolean;
        is_first_login: boolean;
        created_at: Date;
        updated_at: Date;
    }>;
    static updateOtp(id: string, otp_code: string): Promise<{
        name: string;
        id: string;
        email: string;
        password: string;
        role: import("@prisma/client").$Enums.UserRole;
        otp_code: string | null;
        otp_last_sen_at: Date | null;
        verify_token: string | null;
        is_active: boolean;
        is_first_login: boolean;
        created_at: Date;
        updated_at: Date;
    }>;
    static deleteAll(): Promise<Prisma.BatchPayload>;
    static deleteById(id: string): Promise<{
        name: string;
        id: string;
        email: string;
        password: string;
        role: import("@prisma/client").$Enums.UserRole;
        otp_code: string | null;
        otp_last_sen_at: Date | null;
        verify_token: string | null;
        is_active: boolean;
        is_first_login: boolean;
        created_at: Date;
        updated_at: Date;
    }>;
    static deleteOtp(id: string, is_active: boolean): Promise<{
        name: string;
        id: string;
        email: string;
        password: string;
        role: import("@prisma/client").$Enums.UserRole;
        otp_code: string | null;
        otp_last_sen_at: Date | null;
        verify_token: string | null;
        is_active: boolean;
        is_first_login: boolean;
        created_at: Date;
        updated_at: Date;
    }>;
    static isEmailTaken(email: string): Promise<boolean>;
}
//# sourceMappingURL=user.repository.d.ts.map